{"version":3,"file":"static/js/539.3ea31c70.chunk.js","mappings":"sWAEaA,EAAcC,EAAAA,GAAAA,GAAH,mEAKXC,EAAeD,EAAAA,GAAAA,IAAH,8EAMZE,EAAiBF,EAAAA,GAAAA,IAAH,wGAOdG,EAAYH,EAAAA,GAAAA,EAAH,wF,SC6CtB,EAtDoB,SAAC,GAAe,IAAbI,EAAY,EAAZA,MACrB,GAAKA,EAAL,CAIA,IAAQC,EACND,EADMC,MAAOC,EACbF,EADaE,aAAcC,EAC3BH,EAD2BG,YAAaC,EACxCJ,EADwCI,aAAcC,EACtDL,EADsDK,SAAUC,EAChEN,EADgEM,OAE5DC,EAAc,IAAIC,KAAKN,GACvBO,EAAcC,MAAMH,GACtB,kBACAA,EAAYI,cACVC,EAAYR,EAAY,WACP,GAAfA,GAAmBS,QAAQ,GADL,KAE1B,YAEJ,OACE,4BACE,SAAClB,EAAD,oBAAiBM,EAAjB,aAA2BQ,EAA3B,QACA,UAACZ,EAAD,YACE,gBACEiB,IACEX,EAAW,yCAC2BA,GAClCY,EAENC,IAAKf,KAEP,UAACH,EAAD,YACE,SAACC,EAAD,gCAA2Ba,MAC3B,sCACA,uBAAIP,KACJ,mCACCC,GAAUA,EAAOW,OAAS,IACzB,uBAAIX,EAAOY,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IAAeC,KAAK,eA9BhD,CAoCF,E,8BChDYC,EAAO1B,EAAAA,GAAAA,IAAH,oFAMJ2B,EAAkB3B,EAAAA,GAAAA,IAAH,8E,UCwE5B,EAlEqB,WAAO,IAAD,IACjB4B,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAcC,EAAAA,EAAAA,QAAM,qBAACC,EAAAA,EAAAA,MAAcC,aAAf,aAAC,EAAqBC,YAAtB,QAA8B,KAExD,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAO/B,EAAP,KAAcgC,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAmCA,OAjCAC,EAAAA,EAAAA,YAAU,WACR,GAAKX,EAAL,CAIA,IAAMY,EAAa,IAAIC,gBACvBH,GAAa,GAEb,IAAMI,EAAe,mCAAG,WAAMd,GAAN,gFAChBe,EADgB,iBACUf,GADV,kBAGDgB,EAAAA,EACjBD,EACAH,GALkB,OAGdK,EAHc,OAOpBT,EAASS,GAPW,gDASD,iBAAf,KAAMC,MACRC,EAAAA,GAAAA,MAAY,qDAEdX,EAAS,MAZW,yBAcpBE,GAAa,GAdO,4EAAH,sDAoBrB,OAFAI,EAAgBd,GAET,WACLY,EAAWQ,OACZ,CA3BA,CA4BF,GAAE,CAACpB,KAGF,SAAC,IAAD,WACE,UAACqB,EAAA,EAAD,YACE,SAAC,IAAD,CAAQC,GAAIpB,EAAYqB,QAAxB,qBACCd,IAAa,SAACe,EAAA,EAAD,KACd,SAAC,EAAD,CAAahD,MAAOA,IACnBA,IACC,iCACE,SAACsB,EAAD,KACA,oDACA,UAACC,EAAD,YACE,SAAC,IAAD,CAAQuB,GAAG,OAAX,mBACA,SAAC,IAAD,CAAQA,GAAG,UAAX,4BAIN,SAAC,EAAAG,SAAD,CAAUC,UAAU,SAACF,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,OAGF,SAAC,KAAD,CAASG,SAAS,YAAYC,cAAc,QAInD,C","sources":["components/GalleryItem/GalleryItem.styled.jsx","components/GalleryItem/GalleryItem.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieHeader = styled.h2`\n  text-align: center;\n  font-size: 36px;\n`;\n\nexport const MovieWrapper = styled.div`\n  margin: 24px auto;\n  display: flex;\n  gap: 24px;\n`;\n\nexport const DetailsWrapper = styled.div`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nexport const UserScore = styled.p`\n  font-size: 20px;\n  font-style: italic;\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\n\nimport emptyPoster from 'images/unavailable-image.jpg';\n\nimport {\n  MovieHeader,\n  MovieWrapper,\n  DetailsWrapper,\n  UserScore,\n} from './GalleryItem.styled';\n\nconst GalleryItem = ({ movie }) => {\n  if (!movie) {\n    return;\n  }\n\n  const { title, release_date, poster_path, vote_average, overview, genres } =\n    movie;\n  const releaseDate = new Date(release_date);\n  const releaseYear = isNaN(releaseDate)\n    ? 'No year in base'\n    : releaseDate.getFullYear();\n  const userScore = vote_average\n    ? `${(vote_average * 10).toFixed(0)}%`\n    : 'Not rated';\n\n  return (\n    <div>\n      <MovieHeader>{`${title} (${releaseYear})`}</MovieHeader>\n      <MovieWrapper>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300${poster_path}`\n              : emptyPoster\n          }\n          alt={title}\n        />\n        <DetailsWrapper>\n          <UserScore>{`User Score: ${userScore}`}</UserScore>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          {genres && genres.length > 0 && (\n            <p>{genres.map(item => item.name).join(' ')}</p>\n          )}\n        </DetailsWrapper>\n      </MovieWrapper>\n    </div>\n  );\n};\n\nGalleryItem.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string.isRequired })\n    ),\n  }),\n};\n\nexport default GalleryItem;\n","import styled from 'styled-components';\n\nexport const Line = styled.div`\n  height: 1px;\n  width: 100%;\n  background-color: black;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-right: auto;\n`;\n","import { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { useState, useEffect, useRef } from 'react';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { Suspense } from 'react';\n\nimport * as TMDBApiService from 'service/tmdb-api-service';\n\nimport GalleryItem from 'components/GalleryItem/GalleryItem';\nimport { Layout } from 'components/Layout/Layout';\nimport { Button } from 'components/Button/Button.styled';\nimport { Section } from 'components/Section/Section.styled';\nimport { Line, ButtonContainer } from './MovieDetails.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const backLinkRef = useRef(useLocation().state?.from ?? '/'); \n\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const controller = new AbortController();\n    setIsLoading(true);\n\n    const getMovieDetails = async movieId => {\n      const additionalUrl = `/movie/${movieId}`;\n      try {\n        const data = await TMDBApiService.fetchMovies(\n          additionalUrl,\n          controller\n        );\n        setMovie(data);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          toast.error('Error happened on server. Please, reload webpage.');\n        }\n        setMovie(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovieDetails(movieId);\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <Section>\n      <Layout>\n        <Button to={backLinkRef.current}>Go back</Button>\n        {isLoading && <Loader />}\n        <GalleryItem movie={movie} />\n        {movie && (\n          <>\n            <Line />\n            <h3>Additional information</h3>\n            <ButtonContainer>\n              <Button to=\"cast\">Cast</Button>\n              <Button to=\"reviews\">Reviews</Button>\n            </ButtonContainer>\n          </>\n        )}\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n\n        <Toaster position=\"top-right\" reverseOrder={false} />\n      </Layout>\n    </Section>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["MovieHeader","styled","MovieWrapper","DetailsWrapper","UserScore","movie","title","release_date","poster_path","vote_average","overview","genres","releaseDate","Date","releaseYear","isNaN","getFullYear","userScore","toFixed","src","emptyPoster","alt","length","map","item","name","join","Line","ButtonContainer","movieId","useParams","backLinkRef","useRef","useLocation","state","from","useState","setMovie","isLoading","setIsLoading","useEffect","controller","AbortController","getMovieDetails","additionalUrl","TMDBApiService","data","code","toast","abort","Layout","to","current","Loader","Suspense","fallback","position","reverseOrder"],"sourceRoot":""}